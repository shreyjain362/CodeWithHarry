Shift rt click :   Expanded rt click menu
Ctrl++  :  To zoom in git bash
Press Tab to autocomplete in bash, linux or mac
Press Shift + Ins to paste in git bash.

git status
git add --a  :  To stage the changes in all files
git add Summary.txt  :  
git commit -m "Initial commit"  :  To commit the changes
git log  :  To see the commit history
Press Q to quit git log
rm -rf .git  :  To delete .git and hence remove repository feature from the folder

Tracking of tusk by its own .git is independent from that by the .git of its parent folder Git.
Clones of the outer repository will not contain the contents of the embedded repository and will 
not know how to obtain it.

.gitignore file contains all the files that Git should ignore.
If a file has been getting tracked earlier, then you should run git rm --cached file_name to remove tracking it.
With git status, the terminal will display deleted, but it will not delete it.

git diff  :  Compares current state of the file with the "copy" present in staging area
git diff --staged  :  Compares staging area with the last commit
Red color shows deletion and green shows addition of a line to the file we are comparing with.
git commit -a -m "message"  :  Directly commits all "tracked" files without we having to stage first

If you rename a file, Git thinks it is deleted and a new file with that new name is created.
If you then stage the new file, git then knows that the new file is actually a renamed version of the old file.

Rather than renaming the file in the GUI, use git bash to rename. Then, it will recognize renaming before staging.
Similarly, for delete operation.

git log  :  To see the commit history
git log -p  :  To see not only commit names, but also the actual changes (diff's) done in each commit.
git log -2  :  To see ony the last 2 commits. This can b combined with other flags like -p.
git log --stat  :  To see very brief description of each commit
git log --pretty  :  To see just commit name and its message, one in each line, in list format, easy to print.
git log --pretty=short  :  Commit name and authors (creater) of files, not in list format
git log --pretty=full  :  Commit name, its doer and authors, not in list format
git log --since=2.days  :  Commits done in past 2 days
git log --pretty=format:"%h -- %an"  :  Shows commit logs in the stated format
%H  :  Commit hash
%h  :  Abbreivated commit hash
%an  :  author name
%ae  :  author email id

git commit --amend  :  To incorporate a change in staging area to the previous commit. You can also the message of the last commit. 
git checkout -- file_name  :  Restores the state of file to the last commit. Does not work for .gitignore and untracked files.
git checkout -f  :  Does restoration for all files 

git remote add remote_name git@github.com:shreyjain362/repo_name.git  : Maps a remote repository repo_name's link to remote_name
git remote  :  Lists all name of remote servers
git remote -v  :  Lists name and URI of all remote servers
Follow the steps given in https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
to set up SSH connection to GitHub as well as set up the SSH agent on your machine.
ssh_key contains private key, ssh_key.pub contains public key (Copied to your GitHub account)
tail ssh_key.pub  :  Same as cat ssh_key.pub
git push -u remote_name master  :  "Pushes" current repository into branch master on remote_name. If the branch already exists,
				   it merges the two copies (local and remote).
 




