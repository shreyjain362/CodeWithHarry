Shift rt click :   Expanded rt click menu
Ctrl++  :  To zoom in git bash
Press Tab to autocomplete in bash, linux or mac
Press Shift + Ins to paste in git bash.

git status
git add --a  :  To stage the changes in all files
git add Summary.txt  :  
git commit -m "Initial commit"  :  To commit the changes
git log  :  To see the commit history
Press Q to quit git log
rm -rf .git  :  To delete .git and hence remove repository feature from the folder

Tracking of tusk by its own .git is independent from that by the .git of its parent folder Git.
Clones of the outer repository will not contain the contents of the embedded repository and will 
not know how to obtain it.

.gitignore file contains all the files that Git should ignore.
If a file has been getting tracked earlier, then you should run git rm --cached file_name to remove tracking it.
With git status, the terminal will display deleted, but it will not delete it.

git diff  :  Compares current state of the file with the "copy" present in staging area
git diff --staged  :  Compares staging area with the last commit
Red color shows deletion and green shows addition of a line to the file we are comparing with.
git commit -a -m "message"  :  Directly commits all "tracked" files without we having to stage first

If you rename a file, Git thinks it is deleted and a new file with that new name is created.
If you then stage the new file, git then knows that the new file is actually a renamed version of the old file.

Rather than renaming the file in the GUI, use git bash to rename. Then, it will recognize renaming before staging.
Similarly, for delete operation.

git log  :  To see the commit history
git log -p  :  To see not only commit names, but also the actual changes (diff's) done in each commit.
git log -2  :  To see ony the last 2 commits. This can b combined with other flags like -p.
git log --stat  :  To see very brief description of each commit
git log --pretty  :  To see just commit name and its message, one in each line, in list format, easy to print.
git log --pretty=short  :  Commit name and authors (creater) of files, not in list format
git log --pretty=full  :  Commit name, its doer and authors, not in list format
git log --since=2.days  :  Commits done in past 2 days
git log --pretty=format:"%h -- %an"  :  Shows commit logs in the stated format
%H  :  Commit hash
%h  :  Abbreivated commit hash
%an  :  author name
%ae  :  author email id

git commit --amend  :  To incorporate a change in staging area to the previous commit. You can also the message of the last commit. 
git restore -- file_name  :  Restores the state of file to the last commit. This is called unstaging. Does not work for .gitignore and untracked files.
			      Space between -- and file_name is necessary.
git restore -f  :  Does restoration for all files 

git remote add remote_name git@github.com:shreyjain362/repo_name.git  : Maps a remote repository repo_name's link to remote_name. Used for SSH.
git remote add remote_name https://github.com/shreyjain362/CodeWithHarry.git  :  Used for HTTPS
git remote  :  Lists all name of remote servers
git remote -v  :  Lists name and URI of all remote servers
Follow the steps given in https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
to set up SSH connection to GitHub as well as set up the SSH agent on your machine.
ssh_key contains private key, ssh_key.pub contains public key (Copied to your GitHub account)
tail ssh_key.pub  :  Same as cat ssh_key.pub
git push -u remote_name master  :  "Pushes" the current branch master on remote_name with the same branch name. If the branch already exists,
				   it shows error.
git config --global alias.alias_name 'command or part of it'  :  This just replaces the alias_name wherever it occurs with the command inside the single quotes.
								The single quotes are not needed if there is just one word.
git config --global alias.unstage 'restore --staged --'  :   Creates alias unstage
git unstage file_name  :  Unstages the file
git config --global alias.last 'git log -p -1'  :  Although the alias is created, neither last nor git last works
git checkout -b new_branch  :  Creates a new branch new_branch and starts with the last commit on the current branch. Remember to commit your work done in the current branch, else it will be lost.
git checkout other_branch  :  Switches to other_branch. Your workspace changes accordingly. On VS Code with Live Server, the website automatically changes without even refreshing!
			      Open files, if saved in new_branch or other_branch, create a tracked copy there. You must delete either it or the original (in the older branch) copy to merge the two branches.
Untracked and ignored files are accessible to all branches at all times.
git merge other_branch  :  Copies other_branch into current branch. In case of conflicts, the conflicting file changes and shows conflict resolution markers <<<...<<< and >>>...>>>, and you enter a branch shown as current_branch|MERGING. 
			   Do whatever you want with that file and stage and commit. This will get you out of the |MERGING mode. Unlike otherwise, here if you forget to give message while committing, it does not show error;
			   rather it opens up a text editor (Notepad++ in my case) and asks you to enter message there. VS Code also gives you simple click buttons to choose either one or both the branch versions. 
			   The other branch still exists as a separate entity. 
git branch  :  Shows list of all branches
git branch -v  :  Shows list of all branches along with the last commit in each of them
git branch --merged  :  Branches which have been copied into some other branch and hence are redundant
git branch --no-merged  :  Branches which have not been copied into some other branch
git branch -d branch_name  :  Deletes branch_name. Gives error if branch_name has not been copied into some other branch.
git branch -D branch_name  :  No error even if branch_name has not been copied.

 




